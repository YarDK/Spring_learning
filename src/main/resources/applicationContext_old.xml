<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:musicPlayer.properties"/>

    <!-- com.RockMusic musicBean = new com.RockMusic(); -->
    <bean id="rockMusic"
          class="com.RockMusic"
          init-method="doMyInit"
          destroy-method="doMyDestroy">
    </bean>

    <!--<bean id="classicMusic" class="com.ClassicalMusic"/>-->
    <!--<bean id="jazzMusic" class="com.JazzMusic"/>-->


    <!--
    com.MusicPlayer musicPlayer = new com.MusicPlayer();
    musicPlayer.setMusic(musicBean);

    musicPlayer.setName("Some name");
    musicPlayer.setVolume(50);
    -->

    <!--
    scope - определяет сколько экземпляров класса может быть создано
    По умолчанию singleton - метод getBean будет ссылаться всегда на один и тот же объект.
    prototype - метод getBean будет ссылаться на разные объекты заданого класса.
    -->

    <!--
    <bean id="musicPlayer"
          class="com.MusicPlayer"
          scope="prototype">
        <property name="musicList">

            // по сути у нас есть созданный лист, который пустой
            // а тут мы говорим "Вот там есть лист, добавь в него вот это"
            musicPlayer.setMusic(musicList);
            musicList.add(rockMusic);
            musicList.add(classicMusic);
            musicList.add(jazzMusic);

            <list>
                <ref bean="rockMusic"/>
                <ref bean="classicMusic"/>
                <ref bean="jazzMusic"/>
            </list>
        </property>

        <property name="name" value="${musicPlayer.name}" />
        <property name="volume" value="${musicPlayer.volume}" />
    </bean>
    -->

</beans>